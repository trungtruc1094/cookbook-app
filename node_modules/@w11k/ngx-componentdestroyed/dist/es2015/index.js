import { ReplaySubject } from "rxjs";
import { takeUntil } from "rxjs/operators";
export function componentDestroyed(component) {
    var modifiedComponent = component;
    if (modifiedComponent.__componentDestroyed$) {
        return modifiedComponent.__componentDestroyed$;
    }
    var oldNgOnDestroy = component.ngOnDestroy;
    var stop$ = new ReplaySubject();
    modifiedComponent.ngOnDestroy = function () {
        oldNgOnDestroy && oldNgOnDestroy.apply(component);
        stop$.next(true);
        stop$.complete();
    };
    return modifiedComponent.__componentDestroyed$ = stop$.asObservable();
}
/**
 * @deprecated Use takeUntil(componentDestroyed(this)) instead
 */
export function untilComponentDestroyed(component) {
    return function (source) { return source.pipe(takeUntil(componentDestroyed(component))); };
}
