var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component } from "@angular/core";
import { of } from "rxjs";
import { map, takeUntil } from "rxjs/operators";
import { untilComponentDestroyed } from "../index";
var SomeClass = /** @class */ (function () {
    function SomeClass() {
    }
    SomeClass.prototype.subscribe = function () {
    };
    return SomeClass;
}());
var BadComponent = /** @class */ (function () {
    function BadComponent() {
        this.observable = of(1);
        this.stop = of(1);
    }
    BadComponent.prototype.ngOnInit = function () {
        // Error
        this.observable.pipe(map(function (i) { return i; }), takeUntil(this.stop), map(function (i) { return i; })).subscribe();
        // Error
        this.observable.pipe(map(function (i) { return i; }), untilComponentDestroyed(this), map(function (i) { return i; })).subscribe();
        // OK
        this.observable.pipe(map(function (i) { return i; }), takeUntil(this.stop)).subscribe();
        // OK
        this.observable.pipe(map(function (i) { return i; }), untilComponentDestroyed(this)).subscribe();
        // OK
        new SomeClass().subscribe();
    };
    BadComponent.prototype.ngOnDestroy = function () {
    };
    BadComponent = __decorate([
        Component({})
    ], BadComponent);
    return BadComponent;
}());
